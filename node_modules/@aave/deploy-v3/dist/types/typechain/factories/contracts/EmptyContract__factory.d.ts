import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { EmptyContract, EmptyContractInterface } from "../../contracts/EmptyContract";
type EmptyContractConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class EmptyContract__factory extends ContractFactory {
    constructor(...args: EmptyContractConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<EmptyContract>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): EmptyContract;
    connect(signer: Signer): EmptyContract__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636d4ce63c14602d575b600080fd5b600060405190815260200160405180910390f3fea2646970667358221220c2f8e63144d44ffa3d2d81f062b9c4e22b52da7d4f97f537ca0aba353600c4fd64736f6c634300080a0033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): EmptyContractInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): EmptyContract;
}
export {};
//# sourceMappingURL=EmptyContract__factory.d.ts.map